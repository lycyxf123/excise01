/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode head(0);
        ListNode* l3 = &head;
        while (l1 && l2)//当两个链表存在时
        {
            if (l1->val < l2->val)//l1的值小于l2的值
            {
                l3->next = l1;//将l1的值赋给新建的链表l3
                l1 = l1->next;//链表l1后移一位
            }
            else
            {
                l3->next = l2;
                l2 = l2->next;
            }
            l3 = l3->next;

        }
        if (l1)//若l2为空，只计算l1
        {
            l3->next = l1;
        }
        else if (l2) {


            l3->next = l2;
        }
        return head.next;//从头节点返回新链表
    }
};
